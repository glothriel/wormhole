
{{- if .Values.server.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    application: {{ template "name-server" . }}
  name: {{ template "name-server" . }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      application: {{ template "name-server" . }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        application: {{ template "name-server" . }}
    spec: 
      shareProcessNamespace: true
      {{- if .Values.server.priorityClassName }}
      priorityClassName: {{ .Values.server.priorityClassName }}
      {{- end }}
      {{- with .Values.server.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.server.affinity }}
      affinity:
        {{- toYaml .Values.server.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.server.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.server.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.server.tolerations }}
      tolerations:
        {{- toYaml .Values.server.tolerations | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ template "name-server" . }}
      {{- if .Values.devMode.enabled }}
      terminationGracePeriodSeconds: 1
      {{- end }}
      volumes:
      - name: nginx-conf
        configMap:
        
          name: {{ template "name-server" . }}-nginx
      - name: {{ template "name-server" . }}-tmp
      {{- if .Values.devMode.enabled }}
      - name: {{ template "name-server" . }}-dev
      - name: {{ template "name-server" . }}-build-cache
        persistentVolumeClaim:
          claimName: {{ template "name-server" . }}-build-cache
      {{- end }}
      - name: {{ template "name-server" . }}-persistent
        persistentVolumeClaim:
          claimName: {{ template "name-server" . }}
      containers:
        - name: nginx
          image: {{ $.Values.docker.registry }}{{ if $.Values.docker.registry }}/{{ end }}{{ $.Values.docker.nginxImage }}:{{ $.Values.docker.nginxVersion }}
          volumeMounts:
          - mountPath: "/etc/nginx/nginx.conf"
            name: nginx-conf
            subPath: nginx.conf
            readOnly: true
          - mountPath: "/etc/nginx/conf.d"
            name: {{ template "name-server" . }}-persistent
            subPath: nginx
          ports:
          - containerPort: 9000
        - name: wireguard
          image: {{ $.Values.docker.registry }}{{ if $.Values.docker.registry }}/{{ end }}{{ $.Values.docker.wgImage }}:{{ $.Values.docker.wgVersion }}
          ports:
            - containerPort: 51820
              protocol: UDP
          volumeMounts:
          - mountPath: "/etc/wireguard"
            name: {{ template "name-server" . }}-persistent
            subPath: wireguard
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
       
        - image: {{ $.Values.docker.registry }}{{ if $.Values.docker.registry }}/{{ end }}{{ $.Values.docker.image }}:{{ $.Values.docker.version }}
          name: wormhole
          imagePullPolicy: {{ $.Values.server.pullPolicy }}
          {{- with .Values.server.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /metrics
              port: 8090
            initialDelaySeconds: 30
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: 8090
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
          ports:
            - containerPort: 8080
            - containerPort: 8081
          volumeMounts:

          {{- if .Values.devMode.enabled }}
          - mountPath: "/home/go/.cache"
            name: {{ template "name-server" . }}-build-cache
          {{- end }}
          - mountPath: "/tmp"
            name: {{ template "name-server" . }}-tmp
          - mountPath: "/storage"
            name: {{ template "name-server" . }}-persistent
          args:
            - --metrics
            - listen
            - --invite-token
            - hello123
      {{- if .Values.server.path }}
            - --path
            - {{ .Values.server.path | quote }}
      {{- end }}
            - --kubernetes
            - --kubernetes-namespace
            - {{ $.Release.Namespace }}
            - --kubernetes-labels
            - 'application={{ template "name-server" . }}'
            - '--wg-internal-host={{ $.Values.server.wg.internalHost }}'
            - '--wg-public-host={{ $.Values.server.wg.publicHost }}'
            - '--wg-subnet-mask={{ $.Values.server.wg.subnetMask }}'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "name-server" . }}-nginx
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }
    
    stream {
      include /etc/nginx/conf.d/*.conf;
    }


{{ end }}